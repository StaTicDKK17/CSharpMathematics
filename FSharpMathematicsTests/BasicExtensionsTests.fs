module BasicExtensionsTests

open Xunit
open FSharpMathematics.Core
open TestFunctions
open BasicExtensions

// data for 'augmentRight()'

[<Fact>]
let ``Test Matrix Argumentation`` () =

    // random dimensions (m = 2, n = 1)
    let argA1 = array2D [[0.9849422831];
                  [-0.4912421601]] |> Matrix
    let argv1 = [|0.7478879826; -0.4667579785|] |> Vector
    let argAv1 = array2D [[0.9849422831; 0.7478879826];
                  [-0.4912421601; -0.4667579785]] |> Matrix
    let arg1 = TestMatrixAugmentation argA1 argv1 argAv1
    let (_, res, _) = arg1
    Assert.True res

    // random dimensions (m = 4, n = 1)
    let argA2 = array2D [[-0.3614601754];
                  [-0.3397716608];
                  [1.060525871];
                  [-2.370545459]] |> Matrix
    let argv2 = [|-1.643947418; 0.317048748; 1.507806479; -0.0198306269|] |> Vector
    let argAv2 = array2D [[-0.3614601754; -1.643947418];
                  [-0.3397716608; 0.317048748];
                  [1.060525871; 1.507806479];
                  [-2.370545459; -0.0198306269]] |> Matrix
    let arg2 = TestMatrixAugmentation argA2 argv2 argAv2
    let (_, res, _) = arg2
    Assert.True res

    // random dimensions (m = 3, n = 9)
    let argA3 = array2D [[-0.08634164572; -1.082410808; -0.06866205055; 2.10640004; 0.727700019; -0.8296129224; 0.1681805329; -0.3241795211; 1.066727657];
                  [0.8730092377; -1.314910244; 0.9887443429; -0.7929832006; 0.9612997005; -0.3807502282; 0.3407608159; -0.8826278345; 1.322176864];
                  [0.7299362973; 0.852252285; -0.2418464541; 1.559807991; -1.26692703; 1.254303899; 0.5643244318; -1.013293496; 0.4367701153]] |> Matrix
    let argv3 = [|0.9485934319; 0.5969858506; -0.2706211887|] |> Vector
    let argAv3 = array2D [[-0.08634164572; -1.082410808; -0.06866205055; 2.10640004; 0.727700019; -0.8296129224; 0.1681805329; -0.3241795211; 1.066727657; 0.9485934319];
                  [0.8730092377; -1.314910244; 0.9887443429; -0.7929832006; 0.9612997005; -0.3807502282; 0.3407608159; -0.8826278345; 1.322176864; 0.5969858506];
                  [0.7299362973; 0.852252285; -0.2418464541; 1.559807991; -1.26692703; 1.254303899; 0.5643244318; -1.013293496; 0.4367701153; -0.2706211887]] |> Matrix
    let arg3 = TestMatrixAugmentation argA3 argv3 argAv3
    let (_, res, _) = arg3
    Assert.True res

// data for 'matrixVectorProduct()'

[<Fact>]
let ``Matrix Vector Product tests`` () =

    let mutable mvpList = []

    // random dimensions (m = 2, n = 8)
    let mvpA1 = array2D [[-1.17648207; 0.07191561256; -0.2832891181; 0.01470828847; -1.046261679; 0.7392243042; -0.5514374867; 0.6611074679];
                  [0.1393609907; 1.059118624; -0.4083116481; 1.091302968; -0.5622285691; 0.06891326335; 1.477162554; -0.6196650986]] |> Matrix
    let mvpv1 = [|1.325140392; -0.1051634304; -0.2076561556; -0.09914126334; -1.651125804; 0.05071797058; 0.4640549162; 0.06909362327|] |> Vector
    let mvpAv1 = [|0.04558437325; 1.62436248|] |> Vector
    let mvp1 = TestMatrixVectorProduct mvpA1 mvpv1 mvpAv1
    let (_, res, _) = mvp1
    Assert.True res

    // random dimensions (m = 7, n = 4)
    let mvpA2 = array2D [[-0.2987797978; -1.72559902; 0.9908139199; 0.06974979862];
                  [1.166599982; -0.4213589513; -0.3818300424; -0.5838552791];
                  [0.2619687862; 1.395483972; -0.9928630313; 0.6707207598];
                  [0.1669213408; -0.2756882782; -2.246732813; 0.6341394463];
                  [0.6066865448; 3.645073174; 1.067076592; -0.2636602113];
                  [0.3769864063; -0.9209970621; -0.8559244136; -0.2712273238];
                  [-0.4909024671; -0.9195327001; -0.6693595487; 0.09529601868]] |> Matrix
    let mvpv2 = [|0.2116416796; -0.6895676795; -0.9529172251; 0.499404542|] |> Vector
    let mvpAv2 = [|0.2173527686; 0.6097291401; 0.3742401484; 2.683075757; -3.533633263; 1.395048803; 1.215620116|] |> Vector
    let mvp2 = TestMatrixVectorProduct mvpA2 mvpv2 mvpAv2
    let (_, res, _) = mvp2
    Assert.True res

    // random dimensions (m = 8, n = 2)
    let mvpA3 = array2D [[-0.1715505176; -0.3921041017];
                  [-0.08828344022; -0.2268306247];
                  [0.8627932648; 0.2920726941];
                  [0.6863899284; -0.4504702108];
                  [-1.030954682; 1.239905753];
                  [0.7889315585; -0.5938446187];
                  [1.666372467; 0.05332288887];
                  [0.5712071786; -0.7332663515]] |> Matrix
    let mvpv3 = [|2.113977908; -1.848163907|] |> Vector
    let mvpAv3 = [|0.3620186442; 0.2325909313; 1.28412769; 2.283555929; -4.470964482; 2.765306076; 3.424125143; 2.562715761|] |> Vector
    let mvp3 = TestMatrixVectorProduct mvpA3 mvpv3 mvpAv3
    let (_, res, _) = mvp3
    Assert.True res

// data for 'matrixMatrixProduct()'

[<Fact>]
let ``Matrix Matrix Product tests`` () =

    // random dimensions (m = 7, n = 2)
    let mmpA1 = array2D [[0.350575866; -0.1281061149];
                  [-1.178726374; -0.01728732569];
                  [0.6425388801; 0.5961088185];
                  [1.247895426; -0.6611990969];
                  [-0.6361572251; -0.2603659232];
                  [0.5889975694; 0.5938987901];
                  [-0.1979694519; 0.133772523]] |> Matrix
    let mmpB1 = array2D [[-0.8791351939; 0.1158624268; 0.4404906096; -0.5392120646];
                  [-1.127398331; -0.9434000405; -0.3713899296; 0.7533737246]] |> Matrix
    let mmpAB1 = array2D [[-0.1637769619; 0.1614738846; 0.2020026979; -0.2855465174];
                  [1.055749542; -0.1202612345; -0.5127975604; 0.6225596648];
                  [-1.23693063; -0.4879229696; 0.06164353087; 0.1026280048];
                  [-0.3516340297; 0.7683594473; 0.7952489032; -1.171010296];
                  [0.8528043127; 0.1719225026; -0.183524002; 0.1468708054];
                  [-1.187368997; -0.4920414549; 0.03887986856; 0.1298331482];
                  [0.02322699332; -0.1491382248; -0.1368854525; 0.2075282208]] |> Matrix
    let mmp1 = TestMatrixMatrixProduct mmpA1 mmpB1 mmpAB1
    let (_, res, _) = mmp1
    Assert.True res

    // random dimensions (m = 4, n = 4)
    let mmpA2 = array2D [[0.880456205; -1.312042164; -0.4074074623; 1.225095492];
                  [2.274609547; 0.08503799384; 0.1261695282; 1.835767356];
                  [-0.9452739734; 0.9990210771; -0.1005535585; 0.4235027692];
                  [-1.501072792; 0.1963391947; 0.5751887066; 0.3327614022]] |> Matrix
    let mmpB2 = array2D [[1.004394446; -0.2007148813; 1.44254141; -0.07356128387; -1.688654746; -1.042407345];
                  [-0.3486156601; 0.9803111951; -0.429837142; 0.3029426083; 1.609337556; 0.662162298];
                  [-0.1312600603; -1.456314821; 1.377323774; -1.100707618; -0.8111476793; 1.004376769];
                  [-0.1933964487; 0.3382287725; -0.01275976791; -0.498913944; -0.3292420655; -0.9600280906]] |> Matrix
    let mmpAB2 = array2D [[1.158270978; -0.4552542148; 1.257295072; -0.6250216905; -3.671190632; -3.371895546];
                  [1.883367712; 0.06398249772; 3.395018299; -1.19632726; -4.410929325; -3.950427232];
                  [-1.366407587; 1.458760559; -1.936911819; 0.271570249; 3.146132379; 1.139306412];
                  [-1.715970271; -0.2313452003; -1.461778417; -0.6292335454; 2.274647697; 1.952983597]] |> Matrix
    let mmp2 = TestMatrixMatrixProduct mmpA2 mmpB2 mmpAB2
    let (_, res, _) = mmp2
    Assert.True res

    // random dimensions (m = 9, n = 6)
    let mmpA3 = array2D [[-0.87321824; -0.04686952659; -0.1352309719; -1.185630071; 0.1298815616; 0.972151619];
                  [-1.474050108; 1.553218044; 0.261786567; -1.126849746; 0.6085419593; -1.472319085];
                  [0.4341936112; 0.8612023406; -1.362261272; 0.7075979127; 1.18672351; 0.6334191838];
                  [1.74136646; 0.2763547592; -0.09368730082; -0.3719220606; 0.2191803925; 0.06467621551];
                  [1.877472859; -0.2500379173; -0.8315130944; 0.9983944167; -0.4378822775; 0.3285827969];
                  [-1.125294022; 0.470537916; -0.2340078267; 1.932546954; 0.3672868023; -0.9511456097];
                  [1.15657763; 0.2283055836; 0.1584494181; -0.2595763606; 1.096105801; 0.02910839315];
                  [-0.1756134438; 1.254792041; -0.4557579612; -1.233065192; -0.4225428273; -0.1127052661];
                  [0.1582336748; 0.3877185988; 0.4452845085; 0.798570405; 0.2082362075; 0.3130576312]] |> Matrix
    let mmpB3 = array2D [[1.987545241];
                  [0.3165410068];
                  [-1.645476906];
                  [0.2495065916];
                  [-1.654703434];
                  [0.0762140975]] |> Matrix
    let mmpAB3 = array2D [[-1.964523769];
                  [-4.269172203];
                  [1.638305113];
                  [3.252136209];
                  [6.019364523];
                  [-1.900631991];
                  [0.2340160107];
                  [1.181028115];
                  [-0.4169411354]] |> Matrix
    let mmp3 = TestMatrixMatrixProduct mmpA3 mmpB3 mmpAB3
    let (_, res, _) = mmp3
    Assert.True res

// data for 'transpose()'
[<Fact>]
let ``Transpose tests`` () =

    // random dimensions (m = 5, n = 9)
    let tspA1 = array2D [[-0.263289229; -0.7967878862; 0.6676705979; -1.512690456; -0.1467246561; -0.6637949671; -0.2292702651; -0.174621177; -0.6307391727];
                  [0.28825312; 0.6163126591; -1.629057376; -0.86448873; 2.123047854; 0.05585659878; 0.2352457426; 0.7746595611; 0.5246519215];
                  [-0.8838399272; -0.3592139416; -0.4169716102; -0.3595514579; 0.8266404763; -1.376838238; -0.4829913225; -0.4270230163; 2.834835999];
                  [-0.02856683938; 0.1119115901; 0.4606660429; -0.6822482339; 1.412938416; 0.274180291; 1.118175172; -0.3945807639; -0.3517455746];
                  [0.1824345468; -0.8198985555; 0.299950211; -0.3527560371; -0.2296467135; -0.6314209162; 0.7427608152; -0.7903625742; -1.924474833]] |> Matrix
    let tspAt1 = array2D [[-0.263289229; 0.28825312; -0.8838399272; -0.02856683938; 0.1824345468];
                  [-0.7967878862; 0.6163126591; -0.3592139416; 0.1119115901; -0.8198985555];
                  [0.6676705979; -1.629057376; -0.4169716102; 0.4606660429; 0.299950211];
                  [-1.512690456; -0.86448873; -0.3595514579; -0.6822482339; -0.3527560371];
                  [-0.1467246561; 2.123047854; 0.8266404763; 1.412938416; -0.2296467135];
                  [-0.6637949671; 0.05585659878; -1.376838238; 0.274180291; -0.6314209162];
                  [-0.2292702651; 0.2352457426; -0.4829913225; 1.118175172; 0.7427608152];
                  [-0.174621177; 0.7746595611; -0.4270230163; -0.3945807639; -0.7903625742];
                  [-0.6307391727; 0.5246519215; 2.834835999; -0.3517455746; -1.924474833]] |> Matrix
    let tsp1 = TestTranspose tspA1 tspAt1
    let (_, res, _) = tsp1
    Assert.True res

    // random dimensions (m = 2, n = 3)
    let tspA2 = array2D [[0.6505575695; -0.5851928179; 0.1953450951];
                  [0.8354872709; -0.8025584069; 1.038344442]] |> Matrix
    let tspAt2 = array2D [[0.6505575695; 0.8354872709];
                  [-0.5851928179; -0.8025584069];
                  [0.1953450951; 1.038344442]] |> Matrix
    let tsp2 = TestTranspose tspA2 tspAt2
    let (_, res, _) = tsp2
    Assert.True res

    // random dimensions (m = 3, n = 6)
    let tspA3 = array2D [[0.6876238572; -0.8470126126; 0.7859583044; 1.67223543; 1.050612894; -0.5374698492];
                  [0.2989013221; 1.021825115; -0.4025929105; -1.107039561; -0.6020076902; 0.3286011827];
                  [0.2343875147; 1.189031188; -0.5816779661; 1.22408529; 1.370902923; 0.4650708497]] |> Matrix
    let tspAt3 = array2D [[0.6876238572; 0.2989013221; 0.2343875147];
                  [-0.8470126126; 1.021825115; 1.189031188];
                  [0.7859583044; -0.4025929105; -0.5816779661];
                  [1.67223543; -1.107039561; 1.22408529];
                  [1.050612894; -0.6020076902; 1.370902923];
                  [-0.5374698492; 0.3286011827; 0.4650708497]] |> Matrix
    let tsp3 = TestTranspose tspA3 tspAt3
    let (_, res, _) = tsp3
    Assert.True res

// data for 'vectorNorm()'

[<Fact>]
let ``Vector Norm Tests`` () =

    // random dimensions (m = 1, n = 3)
    let vnv1 = [|0.9192222117|] |> Vector
    let vnnv1 = 0.919222
    let vn1 = TestVectorNorm vnv1 vnnv1
    let (_, res, _) = vn1
    Assert.True res

    // random dimensions (m = 6, n = 3)
    let vnv2 = [|0.2672907568; -0.005662582761; -0.4094152244; 0.3189799752; -0.6766530154; -1.557254663|] |> Vector
    let vnnv2 = 1.795480
    let vn2 = TestVectorNorm vnv2 vnnv2
    let (_, res, _) = vn2
    Assert.True res

    // random dimensions (m = 1, n = 3)
    let vnv3 = [|-0.6086750186|] |> Vector
    let vnnv3 = 0.608675
    let vn3 = TestVectorNorm vnv3 vnnv3
    let (_, res, _) = vn3
    Assert.True res

    let v4 = Vector (xs = null)
    Assert.Throws<System.ArgumentNullException> (fun () -> let r4 = BasicOps.VectorNorm v4
                                                           ())
    